@startuml diagramaClaseThreadsYSusHijos

interface Runnable {
  + start() : void
  + join() : void
  + stop() : void
  + is_alive() : bool
}

abstract class Thread {
  - thread : std::thread
  - _keep_running : std::atomic<bool>
  - _is_alive : std::atomic<bool>

  + Thread()
  + start() : void
  + join() : void
  + stop() : void
  + is_alive() : bool
  + main() : void
  # should_keep_running() : bool
  + run() : void <<abstract>>
  + ~Thread()
}


class ClientHandler {
    - protocol : Protocol&
    - clientName : const std::string
    - active : atomic_bool
    - admin : Admin&
    - handleCreate(name : const std::string&) : void
    - handlerJoin(name : const std::string&) : void
    - handleList() : void

    + ClientHandler(protocol : Protocol, clientName : const std::string, admin : Admin&)
    + run() : void
    + ~ClientHandler()
}

class GameLoop {
    + GameLoop(): void
    + run() : void
    + ~GameLoop(): void
}

class Lobby{
    - name : std::string
    - players : std::map<std::string, Protocol>
    - maxPlayers : size_t

    + Lobby(name : const std::string&) : void
    + run() : void
    + ~Lobby() : void
    + addPlayer(player : Protocol&&, playerName : const std::string&) : bool
    + removePlayer(playerName : const std::string&) : void
}


class Acceptor {
  - admin : Admin&  
  - skt : Socket
  - active : atomic_bool
  + Acceptor(port : const std::string&, admin : Admin&)
  + run() : void
  + stop() : void
}

Thread <|-- Acceptor
Thread <|-- ClientHandler
Thread <|-- GameLoop
Thread <|-- Lobby
Runnable <|.. Thread

@enduml